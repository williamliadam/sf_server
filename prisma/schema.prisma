// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-musl"]
}

generator nestgraphql {
  provider     = "prisma-nestjs-graphql"
  output       = "../src/@generated"
  emitCompiled = true
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String?        @unique
  name            String?
  password        String
  phone           String?        @unique
  wxId            String?        @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  role            Role           @default(USER)
  profile         Profile?
  bodyDetail      BodyDetail?
  myPosts         Post[]
  myRecipes       Recipe[]
  myMealTemplates MealTemplate[]
  myMealPlans     MealPlan[]
  chargeDishPlans DishPlan[]     @relation("PlanCooker")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  stars     Int?
  follows   Int?
  published Boolean? @default(false)
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User?    @relation(fields: [authorId], references: [id])
}

model Profile {
  id        Int      @id @default(autoincrement())
  avatar    String?
  nickName  String?
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  goal      Goal     @default(KEEP)
  user      User     @relation(fields: [userId], references: [id])
}

model BodyDetail {
  id        Int      @id @default(autoincrement())
  weight    Int?
  height    Int?
  age       Int?
  bmi       Int?
  bmr       Int?
  tdee      Int?
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Nutrition {
  id        Int            @id @default(autoincrement())
  code      String         @unique
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  usedRow   NutritionRow[]
}

model NutritionRow {
  id             Int       @id @default(autoincrement())
  nutirtionId    Int
  percent        Int
  belongToId     Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  nutirtion      Nutrition @relation(fields: [nutirtionId], references: [id])
  belongMaterial Material  @relation(fields: [belongToId], references: [id])
}

model MateriaUnit {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  toKilo      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  ingredients Ingredient[]
}

model MateriaCategory {
  id        Int               @id @default(autoincrement())
  code      String            @unique
  name      String
  lastId    Int?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  materials Material[]
  next      MateriaCategory[] @relation("NextCategorys")
  last      MateriaCategory?  @relation("NextCategorys", fields: [lastId], references: [id])
}

model Material {
  id                Int             @id @default(autoincrement())
  name              String
  code              String          @unique
  nickName          String
  materiaCategoryId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  category          MateriaCategory @relation(fields: [materiaCategoryId], references: [id])
  nutritionMatrix   NutritionRow[]
  ingredients       Ingredient[]
}

model Ingredient {
  id            Int         @id @default(autoincrement())
  materialId    Int
  amount        Int
  materiaUnitId Int
  recipeId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  material      Material    @relation(fields: [materialId], references: [id])
  unit          MateriaUnit @relation(fields: [materiaUnitId], references: [id])
  usedRecipe    Recipe?     @relation(fields: [recipeId], references: [id])
}

model Method {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String
  desc       String
  recipeId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  usedRecipe Recipe?  @relation(fields: [recipeId], references: [id])
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String
  stars             Int
  authorId          Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  author            User           @relation(fields: [authorId], references: [id])
  ingredients       Ingredient[]
  methods           Method[]
  usedDishPlans     DishPlan[]
  usedDishTemplates DishTemplate[]
}

model DishTemplate {
  id                Int           @id @default(autoincrement())
  recipeId          Int
  amount            Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  mealTemplateId    Int?
  usedMealTemplates MealTemplate? @relation(fields: [mealTemplateId], references: [id])
  recipe            Recipe        @relation(fields: [recipeId], references: [id])
}

model MealTemplate {
  id            Int            @id @default(autoincrement())
  name          String
  userId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  createBy      User           @relation(fields: [userId], references: [id])
  dishTemplates DishTemplate[]
}

model DishPlan {
  id           Int       @id @default(autoincrement())
  recipeId     Int
  amount       Int
  planCookerId Int
  mealPlanId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  planCooker   User      @relation("PlanCooker", fields: [planCookerId], references: [id])
  recipe       Recipe    @relation(fields: [recipeId], references: [id])
  usedMealPlan MealPlan? @relation(fields: [mealPlanId], references: [id])
}

model MealPlan {
  id        Int        @id @default(autoincrement())
  planTime  DateTime?
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  type      MealType   @default(MEAL)
  dishPlans DishPlan[]
  createBy  User       @relation(fields: [userId], references: [id])
}
model Client {
  id                Int      @id @default(autoincrement())
  subcompanyid1span String
  workcode          String
  jobtitle          String
  departmentidspan  String
  idspan            String
  departmentid      String
  telephone         String
  subcompanyid1     String
  telephonespan     String
  lastname          String
  jobtitlespan      String
  workcodespan      String
  lastnamespan      String
  emailspan         String
  randomFieldIdspan String
  email             String
  randomFieldId     String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  MEAL
}

enum Goal {
  KEEP
  BULKING
  SLIMING
}

enum Role {
  USER
  ADMIN
}
