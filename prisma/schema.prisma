// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String?
  password        String
  phone           String         @unique
  wxId            String         @unique
  role            Role           @default(USER)
  profile         Profile?
  bodyDetail      BodyDetail?
  dayPlans        DayPlan[]
  myComments      Comment[]
  myRecipes       Recipe[]
  posts           Post[]
  chargeDishPlans DishPlan[]     @relation("PlanCooker")
  myMealPlans     MealPlan[]
  myMealTemplates MealTemplate[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  avatar    String?
  nickName  String?
  goal      Goal     @default(KEEP)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model BodyDetail {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  weight    Int?
  height    Int?
  age       Int?
  bmi       Int?
  bmr       Int?
  tdee      Int?
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Nutrition {
  id        Int            @id @default(autoincrement())
  code      String         @unique
  name      String
  usedRow   NutritionRow[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
}

model NutritionRow {
  id             Int       @id @default(autoincrement())
  nutirtion      Nutrition @relation(fields: [nutirtionId], references: [id])
  nutirtionId    Int
  percent        Int
  belongMaterial Material  @relation(fields: [belongToId], references: [id])
  belongToId     Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model MateriaUnit {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  toKilo      Int
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model MateriaCategory {
  id        Int               @id @default(autoincrement())
  code      String            @unique
  name      String
  next      MateriaCategory[] @relation("NextCategorys")
  last      MateriaCategory?  @relation("NextCategorys", fields: [lastId], references: [id])
  lastId    Int?
  materials Material[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

model Material {
  id                Int             @id @default(autoincrement())
  name              String
  code              String          @unique
  nickName          String
  category          MateriaCategory @relation(fields: [materiaCategoryId], references: [id])
  nutritionMatrix   NutritionRow[]
  materiaCategoryId Int
  ingredients       Ingredient[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
}

model Ingredient {
  id            Int         @id @default(autoincrement())
  material      Material    @relation(fields: [materialId], references: [id])
  materialId    Int
  unit          MateriaUnit @relation(fields: [materiaUnitId], references: [id])
  amount        Int
  materiaUnitId Int
  usedRecipe    Recipe?     @relation(fields: [recipeId], references: [id])
  recipeId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model Method {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  name       String
  desc       String
  usedRecipe Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Comment {
  id            Int       @id @default(autoincrement())
  authorId      Int
  author        User      @relation(fields: [authorId], references: [id])
  content       String
  rootCommentId Int?
  rootComment   Comment?  @relation("rootComment", fields: [rootCommentId], references: [id])
  belowComments Comment[] @relation("rootComment")
  nextId        Int?      @unique
  nextComment   Comment?  @relation("nextComment", fields: [nextId], references: [id])
  lastComment   Comment?  @relation("nextComment")
  fatherId      Int?
  fatherComment Comment?  @relation("fatherComment", fields: [fatherId], references: [id])
  children      Comment[] @relation("fatherComment")
  rootOfRecipe  Recipe?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Recipe {
  id                Int            @id @default(autoincrement())
  name              String
  author            User           @relation(fields: [authorId], references: [id])
  stars             Int
  rootComment       Comment        @relation(fields: [rootCommentId], references: [id])
  ingredients       Ingredient[]
  methods           Method[]
  authorId          Int
  rootCommentId     Int            @unique
  usedDishPlans     DishPlan[]
  usedDishTemplates DishTemplate[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
}

model DishTemplate {
  id                Int           @id @default(autoincrement())
  recipeId          Int
  recipe            Recipe        @relation(fields: [recipeId], references: [id])
  amount            Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())
  usedMealTemplates MealTemplate? @relation(fields: [mealTemplateId], references: [id])
  mealTemplateId    Int?
}

model MealTemplate {
  id            Int            @id @default(autoincrement())
  name          String
  dishTemplates DishTemplate[]
  userId        Int
  createBy      User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model DishPlan {
  id           Int       @id @default(autoincrement())
  recipeId     Int
  recipe       Recipe    @relation(fields: [recipeId], references: [id])
  amount       Int
  planCookerId Int
  planCooker   User      @relation("PlanCooker", fields: [planCookerId], references: [id])
  usedMealPlan MealPlan? @relation(fields: [mealPlanId], references: [id])
  mealPlanId   Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model MealPlan {
  id           Int        @id @default(autoincrement())
  type         MealType   @default(MEAL)
  planTime     DateTime?
  dishPlans    DishPlan[]
  userId       Int
  usedDayPlans DayPlan?   @relation(fields: [dayPlanId], references: [id])
  dayPlanId    Int?
  createBy     User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

model DayPlan {
  id        Int        @id @default(autoincrement())
  startDate DateTime
  belongTo  User?      @relation(fields: [userId], references: [id])
  userId    Int?
  mealPlans MealPlan[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  MEAL
}

enum Goal {
  KEEP
  BULKING
  SLIMING
}

enum Role {
  USER
  ADMIN
}
